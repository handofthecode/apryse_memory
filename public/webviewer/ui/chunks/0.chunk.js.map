{"version":3,"sources":["webpack:///./src/ui/src/helpers/pageManipulationFunctions.js"],"names":["i","createAnnouncement","onClickAnnouncement","el","document","createElement","id","Date","now","setAttribute","classList","add","body","appendChild","window","setTimeout","getElementById","innerText","removeChild","getNewRotation","curr","counterClockwise","Core","PageRotation","E_0","E_90","E_180","E_270","rotatePages","pageNumbers","doc","core","getDocument","docType","type","workerTypes","PDF","IMAGE","WEBVIEWER_SERVER","isWebViewerServerDocument","rotation","forEach","index","docViewer","getDocumentViewer","currentRotations","getPageRotations","page","setRotation","rotateClockwise","i18next","t","getPageRotation","getCurrentPage","rotateCounterClockwise","insertAbove","width","height","insertBlankPages","insertBelow","map","replace","dispatch","actions","closeElement","DataElements","PAGE_MANIPULATION_OVERLAY","openElement","extractPages","message","title","confirmBtnText","secondaryBtnText","extractAnnouncement","deleteAnnouncement","warning","onConfirm","extractPagesWithAnnotations","then","file","saveAs","onSecondary","removePages","setSelectedPageThumbnails","showWarningMessage","deletePages","isModalEnabled","setShiftKeyThumbnailsPivotIndex","getPageCount","length","Promise","resolve","movePagesToBottom","movePages","getTotalPages","movePagesToTop","noPagesSelectedWarning","keepOpen","exitPageInsertionWarning","closeModal","exitPageReplacementWarning","redactPages","redactionStyles","applyRedactions","createPageRedactions","annots","pageInfo","getPageInfo","pageRotation","redaction","Annotations","RedactionAnnotation","PageNumber","Rect","redactionTypeMap","setCustomData","Author","getCurrentUser","push","getAnnotationManager","addAnnotations","drawAnnotationsFromList","replacePages","sourceDocument","pagesToRemove","pagesToReplaceIntoDocument","documentLoadedInViewer","pageCountOfLoadedDocument","pagesToRemoveFromOriginal","sort","a","b","insertPages","pagesToInsert","insertBeforeThisPage"],"mappings":"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","file":"chunks/0.chunk.js","sourcesContent":["import extractPagesWithAnnotations from 'helpers/extractPagesWithAnnotations';\nimport core from 'core';\nimport { saveAs } from 'file-saver';\nimport actions from 'actions';\nimport i18next from 'i18next';\nimport { workerTypes } from 'constants/types';\nimport { redactionTypeMap } from 'constants/redactionTypes';\nimport DataElements from 'constants/dataElement';\n\nconst createAnnouncement = (onClickAnnouncement) => {\n  if (onClickAnnouncement) {\n    const el = document.createElement('div');\n    const id = `speak-${Date.now()}`;\n    el.setAttribute('id', id);\n    el.setAttribute('aria-live', 'assertive');\n    el.classList.add('visually-hidden');\n    document.body.appendChild(el);\n\n    window.setTimeout(function() {\n      document.getElementById(id).innerText = onClickAnnouncement;\n    }, 100);\n\n    window.setTimeout(function() {\n      document.body.removeChild(document.getElementById(id));\n    }, 1000);\n  }\n};\n\nconst getNewRotation = (curr, counterClockwise = false) => {\n  const { E_0, E_90, E_180, E_270 } = window.Core.PageRotation;\n  switch (curr) {\n    case E_270:\n      return counterClockwise ? E_180 : E_0;\n    case E_180:\n      return counterClockwise ? E_90 : E_270;\n    case E_90:\n      return counterClockwise ? E_0 : E_180;\n    default:\n      return counterClockwise ? E_270 : E_90;\n  }\n};\n\nconst canRotateLoadedDocument = () => {\n  const doc = core.getDocument();\n  const docType = doc?.type;\n\n  return (\n    workerTypes.PDF === docType ||\n    workerTypes.IMAGE === docType ||\n    (docType === workerTypes.WEBVIEWER_SERVER && !doc.isWebViewerServerDocument())\n  );\n};\n\nconst rotatePages = (pageNumbers, counterClockwise) => {\n  if (canRotateLoadedDocument()) {\n    const rotation = counterClockwise ? window.Core.PageRotation.E_270 : window.Core.PageRotation.E_90;\n    pageNumbers.forEach((index) => {\n      core.rotatePages([index], rotation);\n    });\n  } else {\n    const docViewer = core.getDocumentViewer();\n    const currentRotations = docViewer.getPageRotations();\n    for (const page of pageNumbers) {\n      docViewer.setRotation(getNewRotation(currentRotations[page], counterClockwise), page);\n    }\n  }\n};\n\nconst rotateClockwise = (pageNumbers) => {\n  rotatePages(pageNumbers, false);\n  createAnnouncement(`${i18next.t('action.page')} ${pageNumbers} ${i18next.t('action.rotatedClockwise')} ${i18next.t('action.rotationIs')} ${(core.getDocument().getPageRotation(core.getCurrentPage()) + 90) % 360} degrees`);\n};\n\nconst rotateCounterClockwise = (pageNumbers) => {\n  rotatePages(pageNumbers, true);\n  createAnnouncement(`${i18next.t('action.page')} ${pageNumbers} ${i18next.t('action.rotatedCounterClockwise')} ${i18next.t('action.rotationIs')} ${(core.getDocument().getPageRotation(core.getCurrentPage()) + 270) % 360} degrees`);\n};\n\nconst insertAbove = (pageNumbers, width, height) => {\n  core.insertBlankPages(pageNumbers, width, height);\n};\n\nconst insertBelow = (pageNumbers, width, height) => {\n  core.insertBlankPages(pageNumbers.map((i) => i + 1), width, height);\n};\n\nconst replace = (dispatch) => {\n  dispatch(actions.closeElement(DataElements.PAGE_MANIPULATION_OVERLAY));\n  dispatch(actions.openElement('pageReplacementModal'));\n};\n\nconst extractPages = (pageNumbers, dispatch) => {\n  const message = i18next.t('warning.extractPage.message');\n  const title = i18next.t('warning.extractPage.title');\n  const confirmBtnText = i18next.t('warning.extractPage.confirmBtn');\n  const secondaryBtnText = i18next.t('warning.extractPage.secondaryBtn');\n  const extractAnnouncement = `${i18next.t('action.page')} ${pageNumbers} ${i18next.t('action.extracted')}`;\n  const deleteAnnouncement = `${i18next.t('action.page')} ${pageNumbers} ${i18next.t('action.deleted')}`;\n\n  const warning = {\n    message,\n    title,\n    confirmBtnText,\n    onConfirm: () => extractPagesWithAnnotations(pageNumbers).then((file) => {\n      saveAs(file, 'extractedDocument.pdf');\n      createAnnouncement(extractAnnouncement + deleteAnnouncement);\n    }),\n    secondaryBtnText,\n    onSecondary: () => {\n      extractPagesWithAnnotations(pageNumbers).then((file) => {\n        saveAs(file, 'extractedDocument.pdf');\n        core.removePages(pageNumbers).then(() => {\n          dispatch(actions.setSelectedPageThumbnails([]));\n        });\n        createAnnouncement(extractAnnouncement);\n      });\n    },\n  };\n\n  dispatch(actions.showWarningMessage(warning));\n};\n\nconst deletePages = (pageNumbers, dispatch, isModalEnabled = true) => {\n  const deleteAnnouncement = `${i18next.t('action.page')} ${pageNumbers} ${i18next.t('action.deleted')}`;\n  if (isModalEnabled) {\n    let message = i18next.t('warning.deletePage.deleteMessage');\n    const title = i18next.t('warning.deletePage.deleteTitle');\n    const confirmBtnText = i18next.t('action.ok');\n\n    let warning = {\n      message,\n      title,\n      confirmBtnText,\n      onConfirm: () => core.removePages(pageNumbers).then(() => {\n        dispatch(actions.setSelectedPageThumbnails([]));\n        dispatch(actions.setShiftKeyThumbnailsPivotIndex());\n        createAnnouncement(deleteAnnouncement);\n      }),\n    };\n\n    if (core.getDocumentViewer().getPageCount() === pageNumbers.length) {\n      message = i18next.t('warning.deletePage.deleteLastPageMessage');\n\n      warning = {\n        message,\n        title,\n        confirmBtnText,\n        onConfirm: () => Promise.resolve(),\n      };\n    }\n\n    dispatch(actions.showWarningMessage(warning));\n  } else {\n    core.removePages(pageNumbers).then(() => {\n      dispatch(actions.setSelectedPageThumbnails([]));\n      dispatch(actions.setShiftKeyThumbnailsPivotIndex());\n      createAnnouncement(deleteAnnouncement);\n    });\n  }\n};\n\nconst movePagesToBottom = (pageNumbers) => {\n  core.movePages(pageNumbers, core.getTotalPages() + 1);\n  createAnnouncement(`${i18next.t('action.page')} ${pageNumbers} ${i18next.t('action.movedToBottomOfDocument')}`);\n};\n\nconst movePagesToTop = (pageNumbers) => {\n  core.movePages(pageNumbers, 0);\n  createAnnouncement(`${i18next.t('action.page')} ${pageNumbers} ${i18next.t('action.movedToTopofDocument')}`);\n};\n\nconst noPagesSelectedWarning = (pageNumbers, dispatch) => {\n  if (pageNumbers.length === 0) {\n    const title = i18next.t('warning.selectPage.selectTitle');\n    const message = i18next.t('warning.selectPage.selectMessage');\n    const confirmBtnText = i18next.t('action.ok');\n\n    const warning = {\n      message,\n      title,\n      confirmBtnText,\n      onConfirm: () => Promise.resolve(),\n      keepOpen: ['leftPanel'],\n    };\n\n    dispatch(actions.showWarningMessage(warning));\n    return true;\n  }\n  return false;\n};\n\nconst exitPageInsertionWarning = (closeModal, dispatch) => {\n  const title = i18next.t('insertPageModal.warning.title');\n  const message = i18next.t('insertPageModal.warning.message');\n  const confirmBtnText = i18next.t('action.ok');\n\n  const warning = {\n    message,\n    title,\n    confirmBtnText,\n    onConfirm: closeModal,\n    keepOpen: ['leftPanel'],\n  };\n\n  dispatch(actions.showWarningMessage(warning));\n};\n\nconst exitPageReplacementWarning = (closeModal, dispatch) => {\n  const title = i18next.t('option.pageReplacementModal.warning.title');\n  const message = i18next.t('option.pageReplacementModal.warning.message');\n  const confirmBtnText = i18next.t('action.ok');\n\n  const warning = {\n    message,\n    title,\n    confirmBtnText,\n    onConfirm: closeModal,\n    keepOpen: ['leftPanel'],\n  };\n\n  dispatch(actions.showWarningMessage(warning));\n};\n\nconst redactPages = (pageNumbers, redactionStyles) => {\n  core.applyRedactions(createPageRedactions(pageNumbers, redactionStyles));\n};\n\nconst createPageRedactions = (pageNumbers, redactionStyles) => {\n  const annots = [];\n  const document = core.getDocument();\n  for (const page of pageNumbers) {\n    const pageInfo = document.getPageInfo(page);\n    const pageRotation = document.getPageRotation(page);\n    if (pageInfo) {\n      let width;\n      let height;\n      if (pageRotation === 90 || pageRotation === 270) {\n        width = pageInfo.height;\n        height = pageInfo.width;\n      } else {\n        width = pageInfo.width;\n        height = pageInfo.height;\n      }\n      const redaction = new window.Core.Annotations.RedactionAnnotation({\n        PageNumber: page,\n        Rect: new window.Core.Annotations.Rect(0, 0, width, height),\n        ...redactionStyles\n      });\n      redaction.type = redactionTypeMap['FULL_PAGE'];\n      redaction.setCustomData('trn-redaction-type', redactionTypeMap['FULL_PAGE']);\n      redaction.Author = core.getCurrentUser();\n      annots.push(redaction);\n    }\n  }\n  core.getAnnotationManager().addAnnotations(annots);\n  core.getAnnotationManager().drawAnnotationsFromList(annots);\n  return annots;\n};\n\nconst replacePages = async (sourceDocument, pagesToRemove, pagesToReplaceIntoDocument) => {\n  const documentLoadedInViewer = core.getDocument();\n  const pageCountOfLoadedDocument = documentLoadedInViewer.getPageCount();\n  const pagesToRemoveFromOriginal = pagesToRemove.sort((a, b) => a - b);\n\n  // If document to replace into has only one page, or we are replacing all pages\n  // then we can insert pages at the end, and then remove the pages to avoid an error of removing all pages\n  if (pageCountOfLoadedDocument === 1 || pagesToRemoveFromOriginal.length === pageCountOfLoadedDocument) {\n    await documentLoadedInViewer.insertPages(sourceDocument, pagesToReplaceIntoDocument);\n    await documentLoadedInViewer.removePages(pagesToRemoveFromOriginal);\n  } else {\n    // If document to replace into has > 1 page we need insert the new pages at the spot of the first removed page\n    // pagesToRemoveFromOriginal is sorted in ascending order. Interleaving pages would be complex.\n    await documentLoadedInViewer.removePages(pagesToRemoveFromOriginal);\n    await documentLoadedInViewer.insertPages(sourceDocument, pagesToReplaceIntoDocument, pagesToRemoveFromOriginal[0]);\n  }\n};\n\nconst insertPages = async (sourceDocument, pagesToInsert, insertBeforeThisPage = null) => {\n  const documentLoadedInViewer = core.getDocument();\n  await documentLoadedInViewer.insertPages(sourceDocument, pagesToInsert, insertBeforeThisPage);\n};\n\nexport {\n  rotateClockwise,\n  rotateCounterClockwise,\n  insertAbove,\n  insertBelow,\n  replace,\n  extractPages,\n  deletePages,\n  movePagesToBottom,\n  movePagesToTop,\n  noPagesSelectedWarning,\n  redactPages,\n  createPageRedactions,\n  replacePages,\n  insertPages,\n  exitPageInsertionWarning,\n  exitPageReplacementWarning\n};"],"sourceRoot":""}